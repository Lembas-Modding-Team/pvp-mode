buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			url = "https://plugins.gradle.org/m2/"
		}
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven/"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath "net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT"
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.3'
	}
}

plugins {
	id "java"
	id "idea"
	id "io.franzbecker.gradle-lombok" version "1.14"
}

apply plugin: "forge"
apply plugin: 'com.github.johnrengelman.shadow'

ext.configFile = file("build.properties")
ext.config = parseConfig(configFile)

version = config.version
group = config.group
archivesBaseName = config.archivesBaseName

println "Current mod version: " + project.version + "!"

// Need this here so eclipse task generates correctly
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

// This makes IntelliJ recognize the assets folder
idea {
	module {
		inheritOutputDirs = true
	}
}

repositories {
	mavenCentral()
	jcenter()
	maven {
		url = "https://plugins.gradle.org/m2/"
	}
	maven {
		name = "forge"
		url = "http://files.minecraftforge.net/maven"
	}
}

configurations {
	shadow
	compile.extendsFrom provided
	provided.extendsFrom shadow
}

dependencies {
	testCompile 'junit:junit:4.12'

	provided fileTree(dir: "libs", include: ["*.jar"])

	shadow "io.github.lukehutch:fast-classpath-scanner:2.21"
}

minecraft {
	version = config.forge
	runDir = "run"

	replaceIn "src/main/java/pvpmode/PvPMode.java"
	replace "@version@", config.version
	replace "@modid@", config.modid
	replace "@mcversion@", project.minecraft.version
	replace "@name@", config.name
}

jar {
	classifier = "thin"
	manifest {
		attributes "FMLCorePlugin": "pvpmode.internal.common.core.PvPModeCore"
		attributes "FMLCorePluginContainsFMLMod": "true"
	}
	from("./") {
		include "*.md"
	}
}

shadowJar {
	classifier = ""
	configurations = [project.configurations.shadow]
	from(sourceSets.main.allJava) {
		include "*"
	}
	from("./") {
		include "*.md"
	}
}

reobf {
	shadowJar {} // Reobfuscate the shadowed JAR
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
	// this will ensure that this task is redone when the versions change
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include "mcmod.info"
		filter ReplaceTokens, tokens: [version: config.version, mcversion: project.minecraft.version, modid: config.modid, name: config.name]
	}

	// copy everything else, that's not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude "mcmod.info"
	}
}

static def parseConfig(File config) {
	config.withReader {
		def prop = new Properties()
		prop.load(it)
		return (new ConfigSlurper().parse(prop))
	}
}

task buildInformation {
	doFirst {
		println """
=--=--=--=--=--=--=--=--=--=--=--=
Building: ${project.name}
Version: ${project.version}
=--=--=--=--=--=--=--=--=--=--=--=
		"""
	}
}

task cleanBuild(dependsOn: ['buildInformation', 'clean', 'build', 'shadowJar']) {
	group 'build'
	tasks.clean.mustRunAfter tasks.buildInformation
	tasks.build.mustRunAfter tasks.clean
	tasks.shadowJar.mustRunAfter tasks.build
}
